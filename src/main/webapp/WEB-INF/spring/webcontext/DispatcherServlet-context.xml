<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!--udostępnia dostęp do adnotacji w szccególności @Controller i @RequestMapping-->
	<mvc:annotation-driven enable-matrix-variables="true" />
	
	<!--umożliwia automatyczne skanowanie pakietu i wykrywanie klas oznaczonych adnotacją @Controller -->
	<context:component-scan base-package="com.packt.webstore" />
	
	<!--znacznik mvc:resources definiuje położenie katalogu zawierającego zasoby statyczne-->
	<mvc:resources  location="/resources/"  mapping="/resource/**"/>
	
	<!--InternalResourceViewResolver to implementacja interfejsu View, generująca jako odpowiedz stronę JSP -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<bean id= "messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
   		<property name="basename" value="messages"/> 
	</bean>
			
	<!-- ContentNegotiatingViewResolver na podstawie danych żądania deleguje je do odpowiedniego widoku -->
	<bean class= "org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
	      <map>
	          <entry key="json" value="application/json;charset=UTF-8"/>
	          <entry key="xml" value="application/xml;charset=UTF-8"/>
	          <entry key="html" value="text/html;charset=UTF-8"/>
	      </map>
	    </property>
		<property name="defaultViews">
			<list>
				<ref bean="jsonView"/>
				<ref bean="xmlView"/>
			</list>
		</property>
	</bean>
	
	<bean id="jsonView"	class= "org.springframework.web.servlet.view.json.MappingJacksonJsonView">
		<property name="prettyPrint" value="true"/>
	</bean>
	<!-- xmlView posiada atrybut: classesToBeBound, jest nim lista obiektow domenowych , 
			wymagajacych transformacji do XML podczas przetwarzania zadania -->
	<bean id="xmlView" class= "org.springframework.web.servlet.view.xml.MarshallingView">
		<constructor-arg>
			<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
				<property name="classesToBeBound">
					<list>
						<value>com.packt.webstore.domain.Product</value>
					</list>
				</property>
			</bean>
		</constructor-arg>
	</bean>
	
	<!--definicja beana tilesViewResolver -->		
	<bean id="tilesViewResolver"   class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <property name="order" value="-2" />
	</bean>
	
	<!--definicja beana tilesConfigurer odpowiedzialnego za wskazanie pliku z definicjami kafelków -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles/definitions/tile-definition.xml</value>
            </list>
        </property>
	</bean>
			
</beans>